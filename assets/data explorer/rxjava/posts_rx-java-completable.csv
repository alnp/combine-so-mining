Id,PostTypeId,AcceptedAnswerId,ParentId,CreationDate,DeletionDate,Score,ViewCount,Body,OwnerUserId,OwnerDisplayName,LastEditorUserId,LastEditorDisplayName,LastEditDate,LastActivityDate,Title,Tags,AnswerCount,CommentCount,FavoriteCount,ClosedDate,CommunityOwnedDate,ContentLicense
"64317778","1","64317821","","2020-10-12 12:20:10","","1","94","<p>I'm trying to chain two reactive calls which return <code>Completable</code> using retrofit on android:</p>
<pre><code>val userRequest = ...
val languageRequest = ...

return userService.updateUser(userRequest)
    .andThen { userService.updateMessagingUserLanguages(user.id, languageRequest) }
    .doOnComplete { userRepository.updateUser(user) }
</code></pre>
<p>which are defined as follow:</p>
<pre><code>@PUT(&quot;$BASE_USER_URL&quot;)
fun updateUser(@Body user: UserRequest): Completable

@PUT(&quot;$BASE_URL/{userId}/languages&quot;)
fun updateMessagingUserLanguages(@Path(&quot;userId&quot;) userId: Long, @Body request: MessagingLanguageDTO): Completable
</code></pre>
<p>The first <code>Completable</code> succeed and returns a response with a 200 status. However, the second call is never triggered (it never appears in my log and does not pass my breakpoint).</p>
<p>What am I missing here?</p>
","1370087","","","","","2020-10-12 12:22:20","RxJava Completable.andThen never triggers the second Completable","<android><kotlin><retrofit><rx-java><rx-java-completable>","1","0","","","","CC BY-SA 4.0"
"66283257","1","","","2021-02-19 18:39:01","","0","24","<p>using kotlin, having code</p>
<pre><code>fun fetchRemoteDataApi(): Single&lt;RemoteDataResponse&gt; = networkApi.getData()

    // it is just a retrofit
    @GET(&quot;.../api/getData&quot;)
    fun getData() : Single&lt;RemoteDataResponse&gt;

fun mergeApiWithDb(): Completable = fetchRemoteDataApi()
            .zipWith(localDao.getAll())
            .flatMapCompletable { (remoteData, localData) -&gt;
                doMerge(remoteData, localData) //&lt;== return a Completable
            }

</code></pre>
<p>the code flow:</p>
<pre><code>    val mergeApiDbCall = mergeApiWithDb().onErrorComplete().cache() //&lt;=== would like do some inspection at this level
    PublishSubject.create&lt;Unit&gt;().toFlowable(BackpressureStrategy.LATEST)
                .compose(Transformers.flowableIO())
                .switchMap {
                    //merge DB with api, or local default value first then listen to DB change
                    mergeApiDbCall.andThen(listAllTopics())
                            .concatMapSingle { topics -&gt; remoteTopicUsers.map { topics to it } }
                }
                .flatMapCompletable { (topics, user) -&gt;
                    // do something return Completable
                }
                .subscribe({
                    ...
                }, { throwable -&gt;
                    ...
                })
</code></pre>
<p>and when making the call</p>
<pre><code>val mergeApiDbCall = mergeApiWithDb().onErrorComplete().cache()
</code></pre>
<p>the question is if would like to inspect on the <code>Singles&lt;RemoteDataResponse&gt;</code> returned from <code>fetchRemoteDataApi()</code> (i.e. using Log.i(...) to printout the content of <code>RemoteDataResponse</code>, etc.), either in got error or success case, how to do it?</p>
<pre><code>/// the functions
fun listAllTopics(): Flowable&lt;List&lt;String&gt;&gt; = localRepoDao.getAllTopics()

// which a DAO:
    @Query(&quot;SELECT topic FROM RemoteDataTable WHERE read = 1&quot;)
    fun getAllTopics(): Flowable&lt;List&lt;String&gt;&gt;

///
private val remoteTopicUsers: Single&lt;List&lt;User&gt;&gt;
        get() {
            return Single.create {
                networkApi.getTopicUsers(object : ICallback.IGetTopicUsersCallback {
                    override fun onSuccess(result: List&lt;User&gt;) = it.onSuccess(result)
                    override fun onError(errorCode: Int, errorMsg: String?) = it.onError(Exception(errorCode, errorMsg))
                })
            }
        }
</code></pre>
","2987953","","","","","2021-02-19 21:48:05","rxjava, how to inspect the result of a Single","<kotlin><rx-java3><rx-java-completable>","1","0","","","","CC BY-SA 4.0"
"68191518","1","","","2021-06-30 08:54:00","","0","57","<p>In my Android App I'm trying to save a file with input- and outputStream from the contentResolver. I'm using this saveImageExternal function in a Rx Completable.fromCallable and I got a FileNotFoundException because my uri was wrong, but the onError function from my observer was not called and the Completable completed. Why was onError not called? Can someone explain?</p>
<pre><code>private fun saveImageExternal(file: File, uri: Uri, context: Context) {
        val resolver = context.contentResolver
        val outputStream = FileOutputStream(file)
        val inputStream = resolver.openInputStream(uri)
        val buffer = ByteArray(4096)
        var length: Int
        if (inputStream != null) {
            while (inputStream.read(buffer).also { length = it } &gt; 0) {
                outputStream.write(buffer, 0, length)
            }
            outputStream.flush()
        }

    }
</code></pre>
<pre><code>Completable.fromCallable { saveImageExternal(file, uri, context) }
            .subscribeOn(Schedulers.io())
            .subscribe(object : CompletableObserver{
                override fun onSubscribe(d: Disposable) {
                    Timber.d(&quot;onSubscribe&quot;)
                }

                override fun onComplete() {
                   Timber.d(&quot;onComplete&quot;)
                }

                override fun onError(e: Throwable) {
                    Timber.d(&quot;onError&quot;) // never called 
                }

            })
</code></pre>
","14718579","","14718579","","2021-06-30 09:48:04","2021-06-30 09:48:04","Rx Error Handling in Completable.fromCallable","<android><rx-java><rx-kotlin><rx-java-completable>","0","1","","","","CC BY-SA 4.0"
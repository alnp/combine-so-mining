Id,PostTypeId,AcceptedAnswerId,ParentId,CreationDate,DeletionDate,Score,ViewCount,Body,OwnerUserId,OwnerDisplayName,LastEditorUserId,LastEditorDisplayName,LastEditDate,LastActivityDate,Title,Tags,AnswerCount,CommentCount,FavoriteCount,ClosedDate,CommunityOwnedDate,ContentLicense
"67349918","1","","","2021-05-01 19:02:39","","6","3217","<p>I have upgraded my Angular App dependency and successfully installed them. Unfortunately I am now unable to use 'rxjs'. Below is the error returned by the IDE.</p>
<blockquote>
<p>TS7016: Could not find a declaration file for module 'rxjs'.'C:/Path/to/project/node_modules/rxjs/dist/cjs/index.js' implicitly has an 'any' type.   Try <code>npm i --save-dev @types/rxjs</code> if it exists or add a new declaration (.d.ts) file containing `declare module 'rxjs';</p>
</blockquote>
<p>Below is my <code>package.json</code></p>
<pre class=""lang-json prettyprint-override""><code>{
  &quot;engines&quot;: {
    &quot;node&quot;: &quot;14.15.4&quot;,
    &quot;npm&quot;: &quot;7.11.2&quot;
  },
  &quot;name&quot;: &quot;furaha-app&quot;,
  &quot;version&quot;: &quot;0.0.0&quot;,
  &quot;scripts&quot;: {
    &quot;ng&quot;: &quot;ng&quot;,
    &quot;serve&quot;: &quot;ng serve&quot;,
    &quot;start&quot;: &quot;node server.js&quot;,
    &quot;build&quot;: &quot;ng build --prod --aot&quot;,
    &quot;test&quot;: &quot;ng test&quot;,
    &quot;test-coverage&quot;: &quot;ng test --code-coverage&quot;,
    &quot;lint&quot;: &quot;ng lint&quot;,
    &quot;lint-fix&quot;: &quot;npm run lint --fix&quot;,
    &quot;e2e&quot;: &quot;ng e2e&quot;,
    &quot;snyk-protect&quot;: &quot;snyk protect&quot;,
    &quot;prepare&quot;: &quot;npm run snyk-protect&quot;
  },
  &quot;private&quot;: true,
  &quot;dependencies&quot;: {
    &quot;@angular-devkit/architect&quot;: &quot;^0.1102.9&quot;,
    &quot;@angular-devkit/build-angular&quot;: &quot;~0.1102.11&quot;,
    &quot;@angular/animations&quot;: &quot;~11.2.12&quot;,
    &quot;@angular/cdk&quot;: &quot;^11.2.11&quot;,
    &quot;@angular/cli&quot;: &quot;~11.2.11&quot;,
    &quot;@angular/common&quot;: &quot;~11.2.12&quot;,
    &quot;@angular/compiler&quot;: &quot;~11.2.12&quot;,
    &quot;@angular/compiler-cli&quot;: &quot;~11.2.12&quot;,
    &quot;@angular/core&quot;: &quot;~11.2.12&quot;,
    &quot;@angular/forms&quot;: &quot;~11.2.12&quot;,
    &quot;@angular/platform-browser&quot;: &quot;~11.2.12&quot;,
    &quot;@angular/platform-browser-dynamic&quot;: &quot;~11.2.12&quot;,
    &quot;@angular/pwa&quot;: &quot;^0.1102.11&quot;,
    &quot;@angular/router&quot;: &quot;~11.2.12&quot;,
    &quot;@angular/service-worker&quot;: &quot;^11.2.12&quot;,
    &quot;@dimakorotkov/tinymce-mathjax&quot;: &quot;^1.0.7&quot;,
    &quot;@ng-select/ng-select&quot;: &quot;^6.1.0&quot;,
    &quot;@ngrx/component&quot;: &quot;^11.1.1&quot;,
    &quot;@ngrx/effects&quot;: &quot;^11.1.1&quot;,
    &quot;@ngrx/entity&quot;: &quot;^11.1.1&quot;,
    &quot;@ngrx/store&quot;: &quot;^11.1.1&quot;,
    &quot;@ngrx/store-devtools&quot;: &quot;^11.1.1&quot;,
    &quot;@ngx-translate/core&quot;: &quot;^13.0.0&quot;,
    &quot;@tinymce/tinymce-angular&quot;: &quot;^4.2.2&quot;,
    &quot;@types/mathjax&quot;: &quot;0.0.36&quot;,
    &quot;@types/pouchdb&quot;: &quot;^6.4.0&quot;,
    &quot;bootstrap&quot;: &quot;^4.6.0&quot;,
    &quot;express&quot;: &quot;^4.17.1&quot;,
    &quot;flag-icon-css&quot;: &quot;^3.5.0&quot;,
    &quot;google-libphonenumber&quot;: &quot;^3.2.19&quot;,
    &quot;mathjax&quot;: &quot;^3.1.4&quot;,
    &quot;ng2-pdf-viewer&quot;: &quot;^6.4.1&quot;,
    &quot;ngx-bootstrap&quot;: &quot;^6.2.0&quot;,
    &quot;ngx-duration-picker&quot;: &quot;^3.2.0&quot;,
    &quot;ngx-mathjax&quot;: &quot;0.0.13&quot;,
    &quot;path&quot;: &quot;^0.12.7&quot;,
    &quot;pouchdb&quot;: &quot;^7.2.2&quot;,
    &quot;quagga&quot;: &quot;^0.12.1&quot;,
    &quot;rxjs&quot;: &quot;~7.0.0&quot;,
    &quot;snyk&quot;: &quot;^1.574.0&quot;,
    &quot;tinymce&quot;: &quot;^5.7.1&quot;,
    &quot;tslib&quot;: &quot;^2.2.0&quot;,
    &quot;typescript&quot;: &quot;4.1.5&quot;,
    &quot;zone.js&quot;: &quot;~0.11.1&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;@angular-eslint/builder&quot;: &quot;^4.2.0&quot;,
    &quot;@angular-eslint/eslint-plugin&quot;: &quot;^4.2.0&quot;,
    &quot;@angular-eslint/eslint-plugin-template&quot;: &quot;^4.2.0&quot;,
    &quot;@angular-eslint/schematics&quot;: &quot;^4.2.0&quot;,
    &quot;@angular-eslint/template-parser&quot;: &quot;^4.2.0&quot;,
    &quot;@angular/language-service&quot;: &quot;~11.2.12&quot;,
    &quot;@ngrx/schematics&quot;: &quot;^11.1.1&quot;,
    &quot;@types/jasmine&quot;: &quot;^3.6.10&quot;,
    &quot;@types/jasminewd2&quot;: &quot;~2.0.8&quot;,
    &quot;@types/node&quot;: &quot;^15.0.1&quot;,
    &quot;@typescript-eslint/eslint-plugin&quot;: &quot;4.22.0&quot;,
    &quot;@typescript-eslint/parser&quot;: &quot;4.22.0&quot;,
    &quot;eslint&quot;: &quot;^7.25.0&quot;,
    &quot;eslint-plugin-import&quot;: &quot;2.22.1&quot;,
    &quot;eslint-plugin-jsdoc&quot;: &quot;33.0.0&quot;,
    &quot;eslint-plugin-prefer-arrow&quot;: &quot;1.2.3&quot;,
    &quot;jasmine-core&quot;: &quot;~3.7.1&quot;,
    &quot;jasmine-spec-reporter&quot;: &quot;7.0.0&quot;,
    &quot;karma&quot;: &quot;^6.3.2&quot;,
    &quot;karma-chrome-launcher&quot;: &quot;~3.1.0&quot;,
    &quot;karma-coverage-istanbul-reporter&quot;: &quot;^3.0.3&quot;,
    &quot;karma-jasmine&quot;: &quot;~4.0.1&quot;,
    &quot;karma-jasmine-html-reporter&quot;: &quot;^1.5.4&quot;,
    &quot;karma-verbose-reporter&quot;: &quot;0.0.6&quot;,
    &quot;protractor&quot;: &quot;^7.0.0&quot;,
    &quot;ts-node&quot;: &quot;^9.1.1&quot;
  },
  &quot;snyk&quot;: true
}

</code></pre>
<p>On running <code>ng serve</code> I receive several errors related to types in <code>rxje</code> e.g in the below</p>
<pre><code>this.genders$ = this.store.pipe(select(selectGenders));
</code></pre>
<blockquote>
<p>property 'pipe' does not exist on Store</p>
</blockquote>
<pre><code>this.teacherProfile$ = this.route.parent?.paramMap
      .pipe(map(params =&gt; Number(params.get('id'))))
      .pipe(tap(id =&gt; this.teacherId = id))
      .pipe(mergeMap((id) =&gt; this.store.pipe(select(selectTeacher(id)))));
</code></pre>
<blockquote>
<p>Object 'params' is of type unknown</p>
</blockquote>
<p>Is it possible to use rxjs v7 in an Angular v11 app?</p>
","13680115","","","","","2021-05-01 19:58:08","TS7016: Could not find a declaration file for module 'rxjs'","<angular><typescript><npm><rxjs><rxjs7>","1","0","","","","CC BY-SA 4.0"
"67475984","1","","","2021-05-10 18:41:11","","0","138","<p>I upgraded my angular 11 projects <code>RxJS 7</code> and in web storm it suggested me to change some <code>Subject</code> imports, Once I update these imports I am getting below error</p>
<pre><code>
ERROR: node_modules/rxjs/dist/types/internal/ajax/types.d.ts:9:40 - error TS1110: Type expected.

9 export declare type AjaxResponseType = `${AjaxDirection}_${ProgressEventType}`;
                                         ~~~
node_modules/rxjs/dist/types/internal/ajax/types.d.ts:9:43 - error TS2693: 'AjaxDirection' only refers to a type, but is being used as a value here.

9 export declare type AjaxResponseType = `${AjaxDirection}_${ProgressEventType}`;
                                            ~~~~~~~~~~~~~
node_modules/rxjs/dist/types/internal/ajax/types.d.ts:9:60 - error TS2693: 'ProgressEventType' only refers to a type, but is being used as a value here.

9 export declare type AjaxResponseType = `${AjaxDirection}_${ProgressEventType}`;
                                                             ~~~~~~~~~~~~~~~~~

An unhandled exception occurred: node_modules/rxjs/dist/types/internal/ajax/types.d.ts:9:40 - error TS1110: Type expected.

</code></pre>
<p>anyone resolved this issue of tried to migrate to <code>RxJs7</code>?</p>
","537647","","","","","2021-05-10 18:41:11","RXJS 7 - TS2693: 'AjaxDirection' only refers to a type, but is being used as a value here","<angular><rxjs><rxjs7>","0","6","","","","CC BY-SA 4.0"
"68694758","1","","","2021-08-07 17:39:21","","0","464","<p>I am trying <code>RxJs7</code> in my angular 12.2.0 project and it seems like the path of rxjs operator and method changed.</p>
<p>I am getting the below error</p>
<pre><code>./dist/candypal/website/fesm2015/candypal-website.js:8:0-50 - Error: Module not found: Error: Package path ./index is not exported from package /Users/aniruddh/aniruddh/develop/experiment/candypal/node_modules/rxjs (see exports field in /Users/aniruddh/aniruddh/develop/experiment/candypal/node_modules/rxjs/package.json)

</code></pre>
<p>Note that the above error is coming from a library that uses rxjs7</p>
","537647","","","","","2021-08-07 17:39:21","Module not found: Error: Package path ./index is not exported from package node_modules/rxjs (see exports field in /node_modules/rxjs/package.json)","<angular><rxjs><angular12><rxjs7>","0","0","","","","CC BY-SA 4.0"
"69041171","1","","","2021-09-03 07:39:28","","0","57","<p>TS7016: Could not find a declaration file for module 'rxjs'.'C:/Path/to/project/node_modules/rxjs/dist/cjs/index.js' implicitly has an 'any' type.   Try npm i --save-dev @types/rxjs if it exists or add a new declaration (.d.ts) file containing `declare module 'rxjs';</p>
<p>I have updated NestJs to version 8 and rxjs to 7. After that, imports stopped working. There was an index.ts file in the node_modules/rxjs folder before (in the 6th version). When installing the 7th version, it is removed.</p>
","14750997","","","","","2021-10-13 17:43:18","NestJS. TS7016: Could not find a declaration file for module 'rxjs'","<angular><typescript><rxjs><rxjs7>","1","1","","","","CC BY-SA 4.0"
"70013573","1","","","2021-11-18 01:39:40","","2","23","<p>The behavior of <code>delay</code> has changed in RxJs 7. While I understand the reasoning for the change, it was useful for a demo project that I use to simulate over-the-wire API delays. In RxJs 6, the code below would only log to the console after the 5 second delay, but in 7 it is immediately logged (7 no longer waits for delays on an empty observable). Is there a way to replicate the following in RxJs 7?</p>
<pre><code>import { EMPTY } from 'rxjs';
import { delay } from 'rxjs/operators';

EMPTY.pipe(delay(5000)).subscribe({
  complete: () =&gt; {
    console.log('complete');
  },
});
</code></pre>
<p>See the Stackblitz examples below.</p>
<p>RxJs 7 (no delay): <a href=""https://stackblitz.com/edit/rxjs-yx19nb?file=index.ts"" rel=""nofollow noreferrer"">https://stackblitz.com/edit/rxjs-yx19nb?file=index.ts</a>
RxJS 6 (5 second delay): <a href=""https://stackblitz.com/edit/rxjs-8rmhov?file=index.ts"" rel=""nofollow noreferrer"">https://stackblitz.com/edit/rxjs-8rmhov?file=index.ts</a></p>
","1231486","","","","","2021-11-18 03:36:42","How to replicate delay from RxJs 6.x?","<rxjs><rxjs7>","1","3","1","","","CC BY-SA 4.0"
"70066962","1","","","2021-11-22 13:59:36","","0","44","<p><a href=""https://rxjs.dev/deprecations/to-promise#use-one-of-the-two-new-functions"" rel=""nofollow noreferrer"">Quote</a> from RxJS dev team:</p>
<blockquote>
<p>To fix all these issues, we decided to deprecate <code>toPromise()</code>, and to introduce the two new helper functions for conversion to Promises.</p>
<p><strong>Use one of the two new functions</strong></p>
<p>As a replacement to the deprecated
<code>toPromise()</code> method, you should use one of the two built in static
conversion functions <code>firstValueFrom</code> or <code>lastValueFrom</code>....</p>
</blockquote>
<p>In my case I send a get request to the server to check if the server is available or not. The main function (in this case the <code>ngOnInit()</code>) will not go further until an HTTP response or an error comes back.</p>
<p>At <a href=""https://rxjs.dev/deprecations/to-promise#warning"" rel=""nofollow noreferrer"">this part of the article</a>, they suggest adding a <code>timeout</code> to the <code>lastValueFrom()</code> function, which should be added as a config <code>config?: LastValueFromConfig&lt;D&gt;</code>.</p>
<p>My code:</p>
<pre><code>    let something = lastValueFrom(this.http.get&lt;resultDTO&gt; 
    ('/api/account/test'),).then(
          res =&gt; {
            this.note = (res.data);
          }
    );
</code></pre>
<p>How do I have to set this config and pass it to the function?</p>
","11125592","","3001761","","2021-11-22 14:07:13","2021-11-22 14:11:12","How to set a timeout config for lastValueFrom() using RxJS 7 in Angular 13?","<angular><typescript><rxjs><angular13><rxjs7>","1","1","1","","","CC BY-SA 4.0"
"70165068","1","","","2021-11-30 06:11:50","","-1","51","<pre><code>this.userService.addUser(this.user).subscribe(
  (data)=&gt;{
    //success
    console.log(data);
    this._snack.open('Registered Successfully', 'OK', {
      duration: 2000,
      verticalPosition: 'top',
      horizontalPosition: 'center',
      panelClass: ['green-snackbar', 'login-snackbar'],
    });
  },
  (error)=&gt;{
    //error
    console.log(error);
    this._snack.open('Something went Wrong', 'OK', {
      duration: 2000,
      verticalPosition: 'top',
      horizontalPosition: 'center',
      panelClass: ['red-snackbar','login-snackbar'],
    });
  }
);
</code></pre>
<p>I don't know what exactly is happening but subscribe showing deprecated, following is the message</p>
<pre><code>(method) Observable&lt;Object&gt;.subscribe(next?: ((value: Object) =&gt; void) | null | undefined, error?: ((error: any) =&gt; void) | null | undefined, complete?: (() =&gt; void) | null | undefined): Subscription (+2 overloads)
@deprecated — Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments

'(next?: ((value: Object) =&gt; void) | null | undefined, error?: ((error: any) =&gt; void) | null | undefined, complete?: (() =&gt; void) | null | undefined): Subscription' is deprecated.ts(6385)
Observable.d.ts(55, 9): The declaration was marked as deprecated here.
</code></pre>
<p>By the way I am using Angular13</p>
","15136653","","5470544","","2021-12-06 12:49:41","2021-12-06 12:49:41","Subscribe showing deprecated","<rxjs7>","1","1","","","","CC BY-SA 4.0"
"70187917","1","","","2021-12-01 16:34:09","","1","18","<p>I have the following helper rxjs operator:</p>
<pre><code>import { share } from 'rxjs/operators';

export const shareResetOnError = &lt;T&gt;() =&gt; share&lt;T&gt;({
  resetOnError: true,
  resetOnComplete: false
});
</code></pre>
<p>I also have the following spec for this operator:</p>
<pre><code>import { Observable } from 'rxjs';
import { shareResetOnError } from './rxjs';

fdescribe('shareResetOnError', () =&gt; {
  it('should share last emitted value', async () =&gt; {
    const expectedValue = 123;

    let count = 0;
    const observable = new Observable(subscriber =&gt; {
      count++;
      subscriber.next(-expectedValue);
      subscriber.next(expectedValue);
      subscriber.complete();
    }).pipe(shareResetOnError());

    for (let i = 0; i &lt; 3; i++) {
      await expectAsync(observable.toPromise()).toBeResolvedTo(expectedValue);
    }
    expect(count).toBe(1);
  });

  it('should reset value on error', async () =&gt; {
    const expectedError = new Error('test');
    const expectedValue = 123;

    let expectError = true;

    let errorsCount = 0;
    let valuesCount = 0;

    const observable = new Observable(subscriber =&gt; {
      if (expectError) {
        errorsCount++;
        subscriber.error(expectedError);
      } else {
        valuesCount++;
        subscriber.next(expectedValue);
      }
      subscriber.complete();
    }).pipe(shareResetOnError());

    for (let i = 0; i &lt; 4; i++) {
      await expectAsync(observable.toPromise()).toBeRejectedWithError(expectedError.message);
    }
    expect(errorsCount).toBe(4);

    expectError = false;
    for (let i = 0; i &lt; 3; i++) {
      await expectAsync(observable.toPromise()).toBeResolvedTo(expectedValue);
    }
    expect(valuesCount).toBe(1);
  });
});
</code></pre>
<p>For some reason <code>expectAsync(observable.toPromise()).toBeResolvedTo(expectedValue)</code> is failing because <code>observable</code> is resolved to undefined instead of <code>expectedValue</code>. I've also tried <code>lastValueFrom</code> instead of <code>toPromise</code> but it makes no difference. Before switching from rxjs 6 to 7 I had the following definition for <code>shareResetOnError</code>:</p>
<pre><code>import { AsyncSubject, ConnectableObservable, Observable, pipe, Subscription } from 'rxjs';
import { refCount } from 'rxjs/operators';

function publishLastResetOnError&lt;T&gt;() {
  return (source: Observable&lt;T&gt;) =&gt; {
    let subject: AsyncSubject&lt;T&gt;;
    let subscription: Subscription;
    resetSubject();
    return new ConnectableObservable(source, () =&gt; subject);

    function resetSubject() {
      subscription?.unsubscribe();
      subject = new AsyncSubject&lt;T&gt;();
      subscription = subject.subscribe({
        error: resetSubject
      });
    }
  };
}

export const shareResetOnError = &lt;T&gt;() =&gt; pipe(publishLastResetOnError&lt;T&gt;(), refCount());
</code></pre>
<p>It was working as expected and spec wasn't failing. Why <code>observable.toPromise()</code> is not resolved to expected value with rxjs 7 operator?</p>
","2670928","","","","","2021-12-01 16:34:09","rxjs - `share` is not working as expected","<typescript><promise><rxjs><observable><rxjs7>","0","0","","","","CC BY-SA 4.0"
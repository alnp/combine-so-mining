Id,PostTypeId,AcceptedAnswerId,ParentId,CreationDate,DeletionDate,Score,ViewCount,Body,OwnerUserId,OwnerDisplayName,LastEditorUserId,LastEditorDisplayName,LastEditDate,LastActivityDate,Title,Tags,AnswerCount,CommentCount,FavoriteCount,ClosedDate,CommunityOwnedDate,ContentLicense
"50176029","1","50176203","","2018-05-04 13:23:29","","27","25588","<p>I updated my angular project and all my dependencies to latest version. Without to much trouble I solved most of the dependency issues, but I'm still stuck on RxJS. Here is my package.json: </p>

<pre><code>  ""dependencies"": {
    ""@angular-devkit/build-angular"": ""^0.6.0"",
    ""@angular/animations"": ""^6.0.0"",
    ""@angular/common"": ""^6.0.0"",
    ""@angular/compiler"": ""^6.0.0"",
    ""@angular/core"": ""^6.0.0"",
    ""@angular/forms"": ""^6.0.0"",
    ""@angular/http"": ""^6.0.0"",
    ""@angular/platform-browser"": ""^6.0.0"",
    ""@angular/platform-browser-dynamic"": ""^6.0.0"",
    ""@angular/router"": ""^6.0.0"",
    ""angular-bootstrap-md"": ""^6.0.1"",
    ""core-js"": ""^2.5.5"",
    ""font-awesome"": ""^4.7.0"",
    ""rxjs"": ""^6.1.0"",
    ""zone.js"": ""^0.8.26""
  },
  ""devDependencies"": {
    ""@angular/cli"": ""~6.0.0"",
    ""@angular/compiler-cli"": ""^6.0.0"",
    ""@angular/language-service"": ""6.0.0"",
    ""@types/jasmine"": ""~2.8.3"",
    ""@types/jasminewd2"": ""~2.0.3"",
    ""@types/node"": ""~6.0.60"",
    ""codelyzer"": ""^4.0.1"",
    ""electron"": ""^1.8.3"",
    ""jasmine-core"": ""~2.8.0"",
    ""jasmine-spec-reporter"": ""~4.2.1"",
    ""karma"": ""~2.0.2"",
    ""karma-chrome-launcher"": ""~2.2.0"",
    ""karma-coverage-istanbul-reporter"": ""^1.4.2"",
    ""karma-jasmine"": ""~1.1.2"",
    ""karma-jasmine-html-reporter"": ""^1.0.0"",
    ""protractor"": ""~5.3.1"",
    ""ts-node"": ""~6.0.2"",
    ""tslint"": ""~5.10.0"",
    ""typescript"": ""~2.7.2""
</code></pre>

<p>I'm only importing two modules from RxJS: </p>

<pre><code>import { fromPromise } from 'rxjs/observable/fromPromise';
import { Subscription } from 'rxjs/Subscription';
</code></pre>

<p>They are both giving the same error:</p>

<pre><code>    [ts] Module '""***/node_modules/rxjs/Subscription""' has no exported
 member 'Subscription'.
</code></pre>

<p>It's exactly the same for <code>fromPromise</code>. Here is the error message I'm getting from <code>Subscribtion.d.ts</code> (I have not modified the code in any way)</p>

<p><a href=""https://i.stack.imgur.com/AhMZx.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/AhMZx.png"" alt=""enter image description here""></a></p>

<p>UPDATE:</p>

<p>The answers bellow solved the issue with Subscription but <code>fromPromise</code> still gives the same issue even though it's exported correctly: </p>

<p><code>export * from 'rxjs-compat/observable/fromPromise';</code></p>

<p><a href=""https://i.stack.imgur.com/2e8UB.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/2e8UB.png"" alt=""enter image description here""></a></p>
","3468639","","5735030","","2019-07-18 16:02:26","2019-07-30 06:07:25","rxjs/Subscription has no exported member 'Subscription'","<javascript><angular><npm><rxjs><rxjs-compat>","4","3","5","","","CC BY-SA 4.0"
"50412389","1","50412516","","2018-05-18 13:26:14","","2","1562","<p>I upgraded my Angular application from version 5.2 to 6.0 with the instructions from <a href=""https://update.angular.io"" rel=""nofollow noreferrer"">https://update.angular.io</a>. </p>

<p>Now my Angular application doesn't build because of the ""rxjs-5-to-6-migrate"" migration:</p>

<blockquote>
  <p>ERROR in bla.ts: error TS2339:
  Property 'map' does not exist on type 'Observable'.</p>
</blockquote>

<p>I have the following imports:</p>

<pre><code>import { Observable } from 'rxjs/observable';
import { of } from 'rxjs/observable/of';
import { map } from 'rxjs/operators';
</code></pre>

<p>If I change the imports like this it works:</p>

<pre><code>import { Observable } from 'rxjs/observable';
import 'rxjs/Rx';
</code></pre>

<p>But I don't understand why... I want to use the explicit imports and not import all operators.</p>

<hr>

<p><strong>UPDATE:</strong> As some answers pointed out I have to use pipes to be able to use operators. This was my problem because I thought I can still chain the operators to the observables.</p>

<p><em>Old Style:</em></p>

<pre><code>import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';

this.http.get('/api/appsettings/get').map(data =&gt; { return true; }).catch(() =&gt; { return Observable.of(false); });
</code></pre>

<p><em>New Style</em></p>

<pre><code>import { of,  Observable } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

this.http.get('/api/appsettings/get').pipe(map(data =&gt; { return true; }), catchError(() =&gt; { return of(false); }));
</code></pre>
","2301612","","2301612","","2018-05-18 13:55:33","2018-05-18 14:21:28","Property 'map' does not exist on type 'Observable' after upgrading rxjs to 6","<angular><rxjs><rxjs5><rxjs6><rxjs-compat>","3","2","1","","","CC BY-SA 4.0"
"50530792","1","50587851","","2018-05-25 13:53:19","","2","780","<p>We've <a href=""https://github.com/ReactiveX/rxjs/blob/master/MIGRATION.md"" rel=""nofollow noreferrer"">updated</a> our project to use Angular &amp; Rxjs 6 and all works fine.  </p>

<p>We've also updated the code to use the pipe operators, so we would like to drop <code>rxjs-compat</code>.<br>
The only issue is that one of our dependencies still uses the old import syntax for Observable and Subject.</p>

<pre><code>import { Observable } from 'rxjs/Observable';
import { Subject } from 'rxjs/Subject';
</code></pre>

<p>Is there any way to provide our own minimal rxjs-compat just for these two classes?</p>

<p>The library does not do anything fancy with Observable and Subject, and doesn't use any operators, so it seems overkill to import the full rxjs-compat package.</p>
","281252","","310726","","2018-05-25 14:03:41","2018-05-30 03:26:32","How to use only a part of rxjs-compat, or write a custom rxjs-compat?","<rxjs><rxjs6><rxjs-compat>","2","2","","","","CC BY-SA 4.0"
"50860934","1","","","2018-06-14 15:21:35","","0","253","<p>I am upgrading from rxjs 5.5 to 6.2.1. I went through the code base and made all the changes suggested in the rxjs migration document, changed imports, piping instead of chaining, etc. When I run my <code>npm install</code> the <code>build.bundle.rxjs</code> script throws an error on fetch for rxjs-compat and says it is loading rxjs/Rx, which I can find no reference to in my code base. Has anyone else seen similar problems when upgrading their rxjs?</p>

<p>EDIT:</p>

<p>I found that the source of the error is coming from various packages inside of my node_modules. They are using the deprecated import paths. </p>
","6915873","","6915873","","2018-06-14 16:03:47","2018-06-14 16:03:47","When migrating to rxjs 6 gulp build.bundle.rxjs throws error","<angular><rxjs5><rxjs6><rxjs-compat>","0","2","","","","CC BY-SA 4.0"
"54590880","1","","","2019-02-08 10:53:59","","0","76","<p>I have just upgraded my Angular 5 project to 6 following the usual guide. I have updated my packages and have also installed the rxjs-compat package and run the following to migrate from rxjs 5 to rxjs 6 </p>

<pre><code>npm install -g rxjs-tslint

npm install rxjs-compat --save

rxjs-5-to-6-migrate -p tsconfig.json
</code></pre>

<p>My package.json looks as follows</p>

<pre><code>{
  ""name"": ""srm-portal"",
  ""version"": ""1.0.0"",
  ""description"": """",
  ""main"": ""wwwroot/index.html"",
  ""author"": """",
  ""license"": ""ISC"",
  ""scripts"": {
    ""ngc"": ""ngc -p ./tsconfig-aot.json"",
    ""start"": ""concurrently \""webpack-dev-server --hot --inline --port 8080\"" \""dotnet run\"" "",
    ""webpack-dev"": ""set NODE_ENV=development &amp;&amp; webpack"",
    ""webpack-production"": ""set NODE_ENV=production &amp;&amp; webpack"",
    ""build-dev"": ""npm run webpack-dev"",
    ""build-production"": ""npm run ngc &amp;&amp; npm run webpack-production"",
    ""watch-webpack-dev"": ""set NODE_ENV=development &amp;&amp; webpack --watch --color"",
    ""watch-webpack-production"": ""npm run build-production --watch --color"",
    ""publish-for-iis"": ""npm run build-production &amp;&amp; dotnet publish -c Release""
  },
  ""dependencies"": {
    ""@angular/animations"": ""^6.0.0"",
    ""@angular/common"": ""^6.0.0"",
    ""@angular/compiler"": ""^6.0.0"",
    ""@angular/compiler-cli"": ""^6.0.0"",
    ""@angular/core"": ""^6.0.0"",
    ""@angular/forms"": ""^6.0.0"",
    ""@angular/http"": ""^6.0.0"",
    ""@angular/platform-browser"": ""^6.0.0"",
    ""@angular/platform-browser-dynamic"": ""^6.0.0"",
    ""@angular/platform-server"": ""^6.0.0"",
    ""@angular/router"": ""^6.0.0"",
    ""@angular/upgrade"": ""~4.3.0"",
    ""angular-in-memory-web-api"": ""0.3.2"",
    ""angular2-chartjs"": ""^0.2.0"",
    ""angular2-notifications"": ""^0.7.4"",
    ""angular2-redux"": ""^4.0.0"",
    ""core-js"": ""2.5.6"",
    ""date-input-polyfill"": ""^2.14.0"",
    ""font-awesome"": ""4.7.0"",
    ""ie-shim"": ""~0.1.0"",
    ""linkifyjs"": ""^2.1.4"",
    ""ng2-appinsights"": ""^1.0.0-beta.1"",
    ""ng2-currency-mask"": ""^4.3.1"",
    ""ng2-dnd"": ""^4.2.0"",
    ""ng2-toasty"": ""^4.0.3"",
    ""ng2-validation"": ""^4.2.0"",
    ""ngx-chips"": ""1.5.3"",
    ""ngx-easy-table"": ""2.2.0"",
    ""ngx-pagination"": ""3.0.3"",
    ""powerbi-client"": ""^2.4.7"",
    ""primeicons"": ""^1.0.0-beta.10"",
    ""primeng"": ""^6.1.2"",
    ""redux"": ""^3.6.0"",
    ""redux-thunk"": ""^2.2.0"",
    ""reflect-metadata"": ""0.1.10"",
    ""rxjs"": ""^6.1.0"",
    ""rxjs-compat"": ""^6.4.0"",
    ""zone.js"": ""0.8.26""
  },
  ""devDependencies"": {
    ""@types/node"": ""10.0.6"",
    ""angular-router-loader"": ""^0.6.0"",
    ""angular2-template-loader"": ""0.6.2"",
    ""awesome-typescript-loader"": ""3.1.2"",
    ""clean-webpack-plugin"": ""^0.1.16"",
    ""copy-webpack-plugin"": ""^4.0.1"",
    ""css-loader"": ""^0.28.0"",
    ""file-loader"": ""^0.11.1"",
    ""html-webpack-plugin"": ""^2.28.0"",
    ""json-loader"": ""^0.5.4"",
    ""node-sass"": ""^4.5.3"",
    ""raw-loader"": ""^0.5.1"",
    ""sass-loader"": ""^6.0.3"",
    ""source-map-loader"": ""^0.2.1"",
    ""style-loader"": ""^0.16.1"",
    ""ts-helpers"": ""^1.1.2"",
    ""tslint"": ""^5.1.0"",
    ""tslint-loader"": ""^3.5.2"",
    ""typescript"": ""2.7.2"",
    ""url-loader"": ""^0.5.8"",
    ""webpack"": ""^2.4.1"",
    ""webpack-dev-server"": ""2.4.2""
  },
  ""-vs-binding"": {
    ""ProjectOpened"": [
      ""watch-webpack-dev""
    ]
  }
}
</code></pre>

<p>I am using Visual Studio 2017 and have a number of errors shown in the error list</p>

<p>Can anyone help and advise further?</p>

<p>Please see attached images</p>

<p><a href=""https://i.stack.imgur.com/RFuRl.png"" rel=""nofollow noreferrer"">Types.d.ts error</a>
<a href=""https://i.stack.imgur.com/KQn0N.png"" rel=""nofollow noreferrer"">http service api error</a></p>

<p>My project properties look as follows </p>

<p><a href=""https://i.stack.imgur.com/jkAA6.jpg"" rel=""nofollow noreferrer"">Project Properties</a></p>
","11033089","","11033089","","2019-02-08 16:38:19","2019-02-08 16:38:19","Problems after upgrading my Angular project from 5x to 6x","<angular><rxjs><migration><rxjs6><rxjs-compat>","1","0","","","","CC BY-SA 4.0"
"55034665","1","","","2019-03-07 01:26:01","","1","93","<p>The phrasing of the rxjs 5-6 migration instructions, as well as blog posts like <a href=""https://www.academind.com/learn/javascript/rxjs-6-what-changed/"" rel=""nofollow noreferrer"">this one</a> imply that simply by having 'rxjs-compat' as a dependency of our project alongside 'rxjs' then Observables, Subjects, etc imported from 'rxjs' will be compatible with legacy operators. eg. <code>Observable.of(3, 4, 5).concatMap(num =&gt; {/*...*/})</code>. However, this does not seem to be the case for us.  Things do work somewhat as expected if we import directly from 'rxjs-compat' which doesn't seem to be the intended migration path and is also inconvenient in that the TypeScript declarations for 'rxjs' are more complete, and having imports for both 'rxjs' and 'rxjs-compat' in the same file will be mildly annoying to clean up in the future.  Is there an additional step, or is importing from 'rxjs-compat' to be expected?</p>
","6810961","","","","","2019-03-07 03:11:34","Importing from 'rxjs' with 'rxjs-compat' present as an additional dependency does not make compatible Observables","<rxjs><rxjs-compat>","1","0","1","","","CC BY-SA 4.0"
"56637378","1","","","2019-06-17 19:00:56","","1","64","<p>I'm following <a href=""https://github.com/ReactiveX/rxjs/blob/master/docs_app/content/guide/v6/migration.md"" rel=""nofollow noreferrer"">this migration guide</a> to update from <em>rxjs 5.5.5 to 6.</em>.**. 
It looks from this article and many other posts that simply having <em>rxjs-compat</em> in my project will allow to migrate step-by-step. Even worse it seems to work for everyone else. What I understand is that <em>rxjs-compat</em> will allow me to use both pipeable operators as well as Observable prototype operators. But either this is not the case with <em>rxjs-compat</em> or something is wrong.</p>

<p>So my expectation is for instance that I can use <em>map</em> in both forms when observable is imported from <code>rxjs</code>. But I get the following error <em>""error TS2339: Property 'map' does not exist on type 'Observable'.""</em>. Which of course means that typings are incorrect.</p>

<pre><code>import {of} from 'rxjs';
import {map} from 'rxjs/operators';

const arr$ = of([1, 2, 3, 4]);
arr$.map(x=&gt; console.log(x));
arr$.pipe(
    map(x =&gt; console.log(x))
);
</code></pre>

<p>I've tried different versions of typescript (<code>2.7.2</code>,<code>2.9.1</code>,<code>3.1.1</code>) also <em>rxjs</em> and <em>rxjs-compat</em> starting from <code>6.0.0</code> till the <code>latest</code> vesrion. Also tried playing with <em>tsconfig paths</em> and aliasing <em>rxjs to rxjs-compat</em> but its never enough.</p>

<p>So just tell me the truth, does it really support prototype operators. Do I need some additional config? some matching versions? anything?</p>

<p>I can provide additional info if needed (package.json, tsconfig, etc).</p>

<p><a href=""https://stackblitz.com/edit/typescript-pnaidg"" rel=""nofollow noreferrer"">this is setup</a> that can be downloaded for testing. Locally I just run <em>tsc index</em> and it fails</p>
","2740498","","2740498","","2019-06-17 19:13:12","2019-06-17 19:42:20","TS rxjs-compat doesn't support prototype operators?","<typescript><rxjs><rxjs6><rxjs-compat>","0","3","","","","CC BY-SA 4.0"